import boto3
import json
import os
import logging
import time
import datetime
from botocore.exceptions import ClientError
from botocore.config import Config
from botocore.exceptions import ParamValidationError
from botocore.exceptions import ValidationError
from botocore.exceptions import ClientError
from botocore.exceptions import ConnectionError
from botocore.exceptions import EndpointConnectionError
from botocore.exceptions import ReadTimeoutError

logger = logging.getLogger()
logger.setLevel(logging.INFO)
config = Config(
    retries=dict(
        max_attempts=10
    )
)
ec2 = boto3.client('ec2', config=config)
sns = boto3.client('sns')
sns_arn = os.environ['SNS_ARN']
def lambda_handler(event, context):
    try:
        response = ec2.describe_volumes()
        for volume in response['Volumes']:
            if len(volume['Attachments']) == 0:
                volume_id = volume['VolumeId']
                volume_type = volume['VolumeType']
                volume_state = volume['State']
                volume_tags = volume['Tags']
                if len(volume_tags) == 0:
                    print('Volume {} is not tagged. Deleting it'.format(volume_id))
                    ec2.delete_volume(VolumeId=volume_id)
                    print('Volume {} is deleted'.format(volume_id))
                    sns.publish(
                        TopicArn=sns_arn,
                        Message='Volume {} is not tagged. Deleting it'.format(volume_id),
                        Subject='Volume {} is not tagged. Deleting it'.format(volume_id)
                    )
                else:
                    print('Volume {} is tagged. Skipping it'.format(volume_id))
                    sns.publish(
                        TopicArn=sns_arn,
                        Message='Volume {} is tagged. Skipping it'.format(volume_id),
                        Subject='Volume {} is tagged. Skipping it'.format(volume_id)
                    )
    except ParamValidationError as e:
        logger.error("Parameter validation error: %s" % e)
    except ValidationError as e:
        logger.error("Validation error: %s" % e)
    except ClientError as e:
        logger.error("Client error: %s" % e)
    except ConnectionError as e:
        logger.error("Connection error: %s" % e)
    except EndpointConnectionError as e:
        logger.error("Endpoint connection error: %s" % e)
    except ReadTimeoutError as e:
        logger.error("Read timeout error: %s" % e)
    except Exception as e:
        logger.error("Unexpected error: %s" % e)
        sns.publish(
            TopicArn=sns_arn,
            Message='Unexpected error: {}'.format(e),
            Subject='Unexpected error: {}'.format(e)
        )
        raise e
        return {
            'statusCode': 500,
            'body': json.dumps('Unexpected error: {}'.format(e))
        }
        return None
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }
    return None
    